-- module Web3.Async where
--
-- import Prelude
--
-- -- import Control.Monad.Aff (makeAff)
-- import Control.Monad.Eff
--
-- import Data.Either
-- import Data.Function
-- import Data.Nullable
--
-- import Web3 (ETHEREUM)
--
-- -- | Type synonym for callback functions.
-- type Callback eff a = Either Error a -> Eff (eth :: ETHEREUM | eff) Unit
--
-- type JSCallback a = Fn2 (Nullable Error) a Unit
--
-- foreign import _handleCallback ::
--   forall eff a. Fn3 (Error -> Either Error a)
--                     (a -> Either Error a)
--                     (Callback eff a)
--                     (JSCallback a)
--
-- handleCallback :: forall eff a. (Callback eff a) -> JSCallback a
-- handleCallback cb = runFn3 _handleCallback Left Right cb
